// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/decimal.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sum_decimal_cpp
std::string sum_decimal_cpp(std::vector<std::string> s);
RcppExport SEXP _decimal_sum_decimal_cpp(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_decimal_cpp(s));
    return rcpp_result_gen;
END_RCPP
}
// decimal_add
CharacterVector decimal_add(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_add(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_add(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_minus
CharacterVector decimal_minus(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_minus(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_minus(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_multiply
CharacterVector decimal_multiply(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_multiply(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_multiply(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_divide
CharacterVector decimal_divide(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_divide(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_divide(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_equal
LogicalVector decimal_equal(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_equal(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_equal(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_notequal
LogicalVector decimal_notequal(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_notequal(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_notequal(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_lessequal
LogicalVector decimal_lessequal(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_lessequal(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_lessequal(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_greaterequal
LogicalVector decimal_greaterequal(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_greaterequal(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_greaterequal(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_greater
LogicalVector decimal_greater(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_greater(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_greater(a1, a2));
    return rcpp_result_gen;
END_RCPP
}
// decimal_less
LogicalVector decimal_less(std::vector<std::string> a1, std::vector<std::string> a2);
RcppExport SEXP _decimal_decimal_less(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a2(a2SEXP);
    rcpp_result_gen = Rcpp::wrap(decimal_less(a1, a2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_decimal_sum_decimal_cpp", (DL_FUNC) &_decimal_sum_decimal_cpp, 1},
    {"_decimal_decimal_add", (DL_FUNC) &_decimal_decimal_add, 2},
    {"_decimal_decimal_minus", (DL_FUNC) &_decimal_decimal_minus, 2},
    {"_decimal_decimal_multiply", (DL_FUNC) &_decimal_decimal_multiply, 2},
    {"_decimal_decimal_divide", (DL_FUNC) &_decimal_decimal_divide, 2},
    {"_decimal_decimal_equal", (DL_FUNC) &_decimal_decimal_equal, 2},
    {"_decimal_decimal_notequal", (DL_FUNC) &_decimal_decimal_notequal, 2},
    {"_decimal_decimal_lessequal", (DL_FUNC) &_decimal_decimal_lessequal, 2},
    {"_decimal_decimal_greaterequal", (DL_FUNC) &_decimal_decimal_greaterequal, 2},
    {"_decimal_decimal_greater", (DL_FUNC) &_decimal_decimal_greater, 2},
    {"_decimal_decimal_less", (DL_FUNC) &_decimal_decimal_less, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_decimal(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
